require('dotenv').config();
const mongoose = require('mongoose');
const cloudinary = require('cloudinary').v2;
const fs = require('fs');
const path = require('path');

// Configuration Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME || 'demo',
  api_key: process.env.CLOUDINARY_API_KEY || 'demo',
  api_secret: process.env.CLOUDINARY_API_SECRET || 'demo'
});

// Connexion MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/kghmedia', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => console.log('MongoDB connect√©'))
  .catch((err) => console.error('Erreur MongoDB:', err));

// Mod√®les
const Video = require('./models/Video');
const Partner = require('./models/Partner');

async function migrateVideosToCloudinary() {
  console.log('üîÑ Migration des vid√©os vers Cloudinary...');
  
  try {
    const videos = await Video.find({});
    console.log(`üìπ ${videos.length} vid√©os trouv√©es`);
    
    for (const video of videos) {
      console.log(`\nüìπ Traitement de la vid√©o: ${video.title}`);
      
      // V√©rifier si la vid√©o a d√©j√† une URL Cloudinary
      if (video.s3Url && video.s3Url.includes('cloudinary.com')) {
        console.log('‚úÖ Vid√©o d√©j√† sur Cloudinary, ignor√©e');
        continue;
      }
      
      // V√©rifier si le fichier existe localement
      if (video.s3Url && video.s3Url.startsWith('/uploads/')) {
        const filePath = path.join(__dirname, video.s3Url);
        
        if (fs.existsSync(filePath)) {
          console.log('‚òÅÔ∏è Upload vers Cloudinary...');
          
          try {
            const result = await cloudinary.uploader.upload(filePath, {
              resource_type: 'video',
              folder: 'drole-media/videos',
              public_id: `video_${video._id}`,
              overwrite: true
            });
            
            // Mettre √† jour la vid√©o avec l'URL Cloudinary
            video.s3Url = result.secure_url;
            video.cloudinaryId = result.public_id;
            await video.save();
            
            console.log('‚úÖ Vid√©o migr√©e vers Cloudinary:', result.secure_url);
            
            // Supprimer le fichier local
            fs.unlinkSync(filePath);
            console.log('üóëÔ∏è Fichier local supprim√©');
            
          } catch (error) {
            console.error('‚ùå Erreur lors de l\'upload de la vid√©o:', error);
          }
        } else {
          console.log('‚ö†Ô∏è Fichier local non trouv√©:', filePath);
        }
      } else {
        console.log('‚ö†Ô∏è URL invalide ou d√©j√† Cloudinary:', video.s3Url);
      }
    }
    
    console.log('\n‚úÖ Migration des vid√©os termin√©e');
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration des vid√©os:', error);
  }
}

async function migratePartnersToCloudinary() {
  console.log('üîÑ Migration des images de partenaires vers Cloudinary...');
  
  try {
    const partners = await Partner.find({});
    console.log(`ü§ù ${partners.length} partenaires trouv√©s`);
    
    for (const partner of partners) {
      console.log(`\nü§ù Traitement du partenaire: ${partner.name}`);
      
      // V√©rifier si l'image a d√©j√† une URL Cloudinary
      if (partner.profileImage && partner.profileImage.includes('cloudinary.com')) {
        console.log('‚úÖ Image d√©j√† sur Cloudinary, ignor√©e');
        continue;
      }
      
      // V√©rifier si le fichier existe localement
      if (partner.profileImage && partner.profileImage.startsWith('/uploads/partners/')) {
        const filePath = path.join(__dirname, partner.profileImage);
        
        if (fs.existsSync(filePath)) {
          console.log('‚òÅÔ∏è Upload vers Cloudinary...');
          
          try {
            const result = await cloudinary.uploader.upload(filePath, {
              resource_type: 'image',
              folder: 'drole-media/partners',
              public_id: `partner_${partner._id}`,
              overwrite: true
            });
            
            // Mettre √† jour le partenaire avec l'URL Cloudinary
            partner.profileImage = result.secure_url;
            await partner.save();
            
            console.log('‚úÖ Image migr√©e vers Cloudinary:', result.secure_url);
            
            // Supprimer le fichier local
            fs.unlinkSync(filePath);
            console.log('üóëÔ∏è Fichier local supprim√©');
            
          } catch (error) {
            console.error('‚ùå Erreur lors de l\'upload de l\'image:', error);
          }
        } else {
          console.log('‚ö†Ô∏è Fichier local non trouv√©:', filePath);
        }
      } else {
        console.log('‚ö†Ô∏è URL invalide ou d√©j√† Cloudinary:', partner.profileImage);
      }
    }
    
    console.log('\n‚úÖ Migration des partenaires termin√©e');
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration des partenaires:', error);
  }
}

async function cleanupLocalFiles() {
  console.log('üßπ Nettoyage des fichiers locaux...');
  
  try {
    // Supprimer le dossier uploads s'il existe
    const uploadsDir = path.join(__dirname, 'uploads');
    if (fs.existsSync(uploadsDir)) {
      fs.rmSync(uploadsDir, { recursive: true, force: true });
      console.log('üóëÔ∏è Dossier uploads supprim√©');
    }
    
    console.log('‚úÖ Nettoyage termin√©');
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
  }
}

async function main() {
  console.log('üöÄ D√©but de la migration vers Cloudinary...');
  
  try {
    await migrateVideosToCloudinary();
    await migratePartnersToCloudinary();
    await cleanupLocalFiles();
    
    console.log('\nüéâ Migration termin√©e avec succ√®s !');
    console.log('‚úÖ Toutes les donn√©es sont maintenant sauvegard√©es sur Cloudinary');
    console.log('‚úÖ Les fichiers locaux ont √©t√© supprim√©s');
    console.log('‚úÖ Votre application est maintenant r√©sistante aux red√©ploiements Heroku');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
  } finally {
    mongoose.connection.close();
    process.exit(0);
  }
}

// Ex√©cuter la migration
main();
