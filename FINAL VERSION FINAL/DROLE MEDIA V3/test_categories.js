const mongoose = require('mongoose');
const Category = require('./models/Category');
const Video = require('./models/Video');

// Connexion MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/kghmedia', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => console.log('‚úÖ MongoDB connect√©'))
  .catch((err) => console.error('‚ùå Erreur MongoDB:', err));

async function testCategories() {
  try {
    console.log('üß™ Test de la gestion des cat√©gories...');
    
    // 1. Lister toutes les cat√©gories
    console.log('\nüìä Cat√©gories existantes:');
    const categories = await Category.find({});
    console.log(`‚úÖ ${categories.length} cat√©gories trouv√©es:`);
    categories.forEach(cat => {
      console.log(`  - ${cat._id}: ${cat.name}`);
    });
    
    // 2. Compter les vid√©os par cat√©gorie
    console.log('\nüìπ Vid√©os par cat√©gorie:');
    for (const category of categories) {
      const videoCount = await Video.countDocuments({ category: category._id });
      console.log(`  - ${category.name}: ${videoCount} vid√©o(s)`);
    }
    
    // 3. V√©rifier les vid√©os sans cat√©gorie
    const videosWithoutCategory = await Video.countDocuments({ category: { $exists: false } });
    console.log(`\nüìπ Vid√©os sans cat√©gorie: ${videosWithoutCategory}`);
    
    // 4. V√©rifier les vid√©os avec cat√©gorie null
    const videosWithNullCategory = await Video.countDocuments({ category: null });
    console.log(`üìπ Vid√©os avec cat√©gorie null: ${videosWithNullCategory}`);
    
    console.log('\n‚úÖ Test termin√© !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    mongoose.connection.close();
    console.log('üîå Connexion MongoDB ferm√©e');
  }
}

testCategories();
