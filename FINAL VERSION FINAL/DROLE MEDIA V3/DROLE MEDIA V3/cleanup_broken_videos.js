require('dotenv').config();
const mongoose = require('mongoose');

// Connexion MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/kghmedia', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => console.log('‚úÖ MongoDB connect√©'))
  .catch((err) => console.error('‚ùå Erreur MongoDB:', err));

// Mod√®les
const Video = require('./models/Video');

async function cleanupBrokenVideos() {
  console.log('üßπ Nettoyage des vid√©os avec URLs cass√©es...');
  
  try {
    const videos = await Video.find({});
    console.log(`üìπ ${videos.length} vid√©os trouv√©es dans la base de donn√©es`);
    
    let cleanedCount = 0;
    
    for (const video of videos) {
      console.log(`\nüìπ Traitement de la vid√©o: ${video.title}`);
      console.log('  - s3Url:', video.s3Url);
      console.log('  - Status:', video.status);
      
      // V√©rifier si l'URL est cass√©e (locale mais pas Cloudinary)
      if (video.s3Url && video.s3Url.startsWith('/uploads/') && !video.s3Url.includes('cloudinary.com')) {
        console.log('‚ùå URL cass√©e d√©tect√©e - Suppression de la vid√©o');
        
        try {
          await Video.findByIdAndDelete(video._id);
          console.log('‚úÖ Vid√©o supprim√©e:', video.title);
          cleanedCount++;
        } catch (error) {
          console.error('‚ùå Erreur lors de la suppression:', error);
        }
      } else if (video.s3Url && video.s3Url.includes('cloudinary.com')) {
        console.log('‚úÖ URL Cloudinary valide - Conserv√©e');
      } else if (!video.s3Url) {
        console.log('‚ö†Ô∏è Pas d\'URL - Suppression de la vid√©o');
        try {
          await Video.findByIdAndDelete(video._id);
          console.log('‚úÖ Vid√©o supprim√©e:', video.title);
          cleanedCount++;
        } catch (error) {
          console.error('‚ùå Erreur lors de la suppression:', error);
        }
      } else {
        console.log('‚úÖ URL valide - Conserv√©e');
      }
    }
    
    console.log(`\nüéâ Nettoyage termin√© !`);
    console.log(`‚úÖ ${cleanedCount} vid√©os supprim√©es`);
    console.log(`‚úÖ Base de donn√©es nettoy√©e`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
  } finally {
    mongoose.connection.close();
    process.exit(0);
  }
}

// Ex√©cuter le nettoyage
cleanupBrokenVideos();
