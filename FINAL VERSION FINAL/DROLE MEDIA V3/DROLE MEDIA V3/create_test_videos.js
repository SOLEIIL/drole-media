const mongoose = require('mongoose');
const Video = require('./models/Video');
const Category = require('./models/Category');
const User = require('./models/User');

// Connexion MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/kghmedia', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => console.log('‚úÖ MongoDB connect√©'))
  .catch((err) => console.error('‚ùå Erreur MongoDB:', err));

async function createTestVideos() {
  try {
    console.log('üé¨ Cr√©ation de vid√©os de test...');
    
    // 1. Cr√©er des cat√©gories de test
    console.log('üè∑Ô∏è Cr√©ation des cat√©gories de test...');
    const categories = [];
    
    const categoryNames = ['Humour', 'Musique', 'Sport', 'Technologie', 'Cuisine'];
    
    for (const name of categoryNames) {
      let category = await Category.findOne({ name });
      if (!category) {
        category = new Category({ name });
        await category.save();
        console.log(`‚úÖ Cat√©gorie cr√©√©e: ${name}`);
      } else {
        console.log(`‚ÑπÔ∏è Cat√©gorie existante: ${name}`);
      }
      categories.push(category);
    }
    
    // 2. Cr√©er un utilisateur de test
    console.log('üë§ Cr√©ation d\'un utilisateur de test...');
    let testUser = await User.findOne({ email: 'test@example.com' });
    if (!testUser) {
      testUser = new User({
        name: 'Utilisateur Test',
        email: 'test@example.com',
        password: 'password123',
        emailVerified: true
      });
      await testUser.save();
      console.log('‚úÖ Utilisateur de test cr√©√©');
    } else {
      console.log('‚ÑπÔ∏è Utilisateur de test existant');
    }
    
    // 3. Cr√©er des vid√©os de test
    console.log('üìπ Cr√©ation des vid√©os de test...');
    const testVideos = [
      {
        title: 'Vid√©o Humour 1',
        description: 'Une vid√©o dr√¥le',
        s3Url: 'https://example.com/video1.mp4',
        category: categories[0]._id, // Humour
        status: 'validated',
        user: testUser._id
      },
      {
        title: 'Vid√©o Musique 1',
        description: 'Une vid√©o musicale',
        s3Url: 'https://example.com/video2.mp4',
        category: categories[1]._id, // Musique
        status: 'validated',
        user: testUser._id
      },
      {
        title: 'Vid√©o Sport 1',
        description: 'Une vid√©o sportive',
        s3Url: 'https://example.com/video3.mp4',
        category: categories[2]._id, // Sport
        status: 'validated',
        user: testUser._id
      },
      {
        title: 'Vid√©o Technologie 1',
        description: 'Une vid√©o tech',
        s3Url: 'https://example.com/video4.mp4',
        category: categories[3]._id, // Technologie
        status: 'validated',
        user: testUser._id
      },
      {
        title: 'Vid√©o Cuisine 1',
        description: 'Une vid√©o de cuisine',
        s3Url: 'https://example.com/video5.mp4',
        category: categories[4]._id, // Cuisine
        status: 'validated',
        user: testUser._id
      },
      {
        title: 'Vid√©o Humour 2',
        description: 'Une autre vid√©o dr√¥le',
        s3Url: 'https://example.com/video6.mp4',
        category: categories[0]._id, // Humour
        status: 'validated',
        user: testUser._id
      }
    ];
    
    for (const videoData of testVideos) {
      const existingVideo = await Video.findOne({ title: videoData.title });
      if (!existingVideo) {
        const video = new Video(videoData);
        await video.save();
        console.log(`‚úÖ Vid√©o cr√©√©e: ${videoData.title} (Cat√©gorie: ${videoData.category})`);
      } else {
        console.log(`‚ÑπÔ∏è Vid√©o existante: ${videoData.title}`);
      }
    }
    
    // 4. Afficher les statistiques
    console.log('\nüìä Statistiques finales:');
    const totalVideos = await Video.countDocuments({});
    const videosByCategory = {};
    
    for (const category of categories) {
      const count = await Video.countDocuments({ category: category._id });
      videosByCategory[category.name] = count;
      console.log(`  - ${category.name}: ${count} vid√©o(s)`);
    }
    
    console.log(`\n‚úÖ ${totalVideos} vid√©os de test cr√©√©es avec succ√®s !`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des vid√©os de test:', error);
  } finally {
    mongoose.connection.close();
    console.log('üîå Connexion MongoDB ferm√©e');
  }
}

createTestVideos();
